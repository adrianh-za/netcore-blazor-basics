@page "/LifecycleDemo"
@page "/LifecycleDemo/{Parameter}"

<h3>LifecycleDemo</h3>
@DateTime.Now<br/>
@foreach(var e in Events)
{
    <div> @e </div>
}

<a class="btn btn-primary" href="@($"/LifecycleDemo/{Guid.NewGuid()}")">Refresh</a>

@code {
    List<string> Events = new();

    [Parameter]
    public string? Parameter { get; set; }

    public void LogEvent(string eventName)
    {
        Events.Add($"{eventName} Start");
        Events.Add($"{eventName} End");
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        LogEvent("SetParametersAsync");
        return base.SetParametersAsync(parameters);
    }

    protected async override void OnInitialized()
    {
        LogEvent("OnInitialized");
    }

    protected override Task OnInitializedAsync()
    {
        LogEvent("OnInitializedAsync");
        return base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        LogEvent("OnParametersSet");
        base.OnParametersSet();
    }

    protected override Task OnParametersSetAsync()
    {
        LogEvent("OnParametersSetAsync");
        return base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Events.Add($"OnAfterRender is first render:{firstRender}");
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Events.Add($"OnAfterRenderAsync is first render:{firstRender}");
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override bool ShouldRender()
    {
        Events.Add("ShouldRender");
        return true;
    }

}